/* Prototype */
.o-flex {
  display: flex; }

.o-flex--align-center {
  align-items: center; }

.o-flex__grow {
  flex-grow: 1; }

@media (min-width: 320px) {
  .o-flex\@mobile {
    display: flex; } }

@media (min-width: 641px) {
  .o-flex\@tablet {
    display: flex; } }

@media (min-width: 769px) {
  .o-flex\@desktop {
    display: flex; } }

@media (min-width: 990px) {
  .o-flex\@large-desktop {
    display: flex; } }

.prototype .page__header {
  padding-top: 48px; }

.prototype .page__footer {
  padding-bottom: 48px; }

.prototype .prototype__example {
  background-color: #f0f4f5;
  border: 1px solid #aeb7bd; }
  .prototype .prototype__example a {
    display: block;
    border-bottom: 1px solid #aeb7bd;
    padding: 0.5em;
    color: #005eb8; }
  .prototype .prototype__example iframe {
    border: 0; }
  .prototype .prototype__example.scaled .thumbnail {
    position: relative;
    -ms-zoom: 0.47;
    -moz-transform: scale(0.47);
    -moz-transform-origin: 0 0;
    -o-transform: scale(0.47);
    -o-transform-origin: 0 0;
    -webkit-transform: scale(0.47);
    -webkit-transform-origin: 0 0; }
  .prototype .prototype__example.scaled .thumbnail iframe {
    width: 1440px;
    background-color: #f0f4f5; }
  .prototype .prototype__example.block .thumbnail iframe {
    width: 100%;
    background-color: #f0f4f5; }

.prototype .prototype__table {
  padding: 0; }
  .prototype .prototype__table th,
  .prototype .prototype__table td {
    line-height: 1em;
    padding: 0.5em;
    vertical-align: middle; }

.prototype--inner .page__layout {
  box-sizing: border-box;
  display: flex;
  flex-wrap: wrap; }
  @media screen\0 {
    .prototype--inner .page__layout:after {
      content: "";
      display: table;
      clear: both; } }
  .prototype--inner .page__layout .page__leftbar {
    box-sizing: border-box;
    width: 25%;
    flex: 0 0 25%; }
    @media screen\0 {
      .prototype--inner .page__layout .page__leftbar {
        float: left;
        flex: none; } }
  .prototype--inner .page__layout .page__main {
    box-sizing: border-box;
    width: 70.83333%;
    flex: 0 0 70.83333%;
    margin-left: 4.16667%; }
    @media screen\0 {
      .prototype--inner .page__layout .page__main {
        float: left;
        flex: none; } }

@media (max-width: 48.0525em) {
  .prototype--inner .page__layout .page__leftbar,
  .prototype--inner .page__layout .page__main {
    box-sizing: border-box;
    width: 100%;
    flex: 0 0 100%;
    margin-left: 0%; } }
  @media screen\0  and (max-width: 48.0525em) {
    .prototype--inner .page__layout .page__leftbar,
    .prototype--inner .page__layout .page__main {
      float: left;
      flex: none; } }

.prototype--inner .page__leftbar {
  margin-top: 48px;
  margin-bottom: 48px; }
  .prototype--inner .page__leftbar .nhsuk-back-link {
    border-bottom: 1px solid #CCC;
    padding-bottom: 12px; }

/* Examples */
.example--blocks {
  padding: 1em;
  background-color: #f0f4f5; }

.prototype__subnav h3 {
  font-weight: bold;
  font-size: 19px;
  font-size: 1.1875rem;
  line-height: 1.25;
  color: #4c6272;
  margin-bottom: 12px;
  padding-top: 4px;
  padding-left: 4px; }

.prototype__subnav h4 {
  font-size: 16px;
  font-weight: bold;
  color: #5e6e79;
  margin-bottom: 0.5em;
  padding-left: 4px; }

.prototype__subnav ul {
  list-style: none;
  margin: 0 0 24px 0;
  padding: 0; }
  .prototype__subnav ul li {
    font-size: 16px;
    font-size: 1rem;
    line-height: 1.3;
    padding-left: 4px;
    border-left: 4px solid transparent;
    margin-left: -4px; }
    .prototype__subnav ul li a {
      color: #005eb8;
      text-decoration: none; }
    .prototype__subnav ul li.current {
      border-left: 4px solid #005eb8; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
