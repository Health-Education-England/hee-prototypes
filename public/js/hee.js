(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const r=function(){var e,r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.toggleLink=this.container.querySelector("a"),this.parentList=this.container.parentNode,this.addEventListeners()}var t,r;return t=e,(r=[{key:"addEventListeners",value:function(){var e=this;this.toggleLink&&(this.toggleLink.addEventListener("mousedown",(function(t){return e.toggleMenu(t)})),this.toggleLink.addEventListener("keyup",(function(t){13===t.keyCode&&e.toggleMenu(t)})))}},{key:"handleState",value:function(){var e=this,t=document.querySelectorAll(".nhsuk-subheader.is-active");t.forEach((function(t){t!=e.container?(t.classList.remove("is-active"),t.toggleAttribute("aria-expanded")):e.toggleClass(e.parentList,"submenu-open")})),0===t.length&&this.toggleClass(this.parentList,"submenu-open")}},{key:"toggleMenu",value:function(e){e.preventDefault(),this.handleState(),this.toggleClass(this.container,"is-active"),this.toggleAttribute(this.container,"aria-expanded")}},{key:"toggleClass",value:function(e,t){e&&t&&(e.classList.contains(t)?e.classList.remove(t):e.classList.add(t))}},{key:"toggleAttribute",value:function(e,t){if(e&&t){var n="true"===e.getAttribute(t)?"false":"true";e.setAttribute(t,n)}}}])&&n(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();(e=document.getElementsByClassName("nhsuk-subheader"),function(e){if(Array.isArray(e))return t(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).forEach((function(e){return new r(e)}));var o=document.querySelector("#close-menu");function i(e){var t=document.querySelector(".nhsuk-header__navigation.js-show");if(t){var n=e.target!==t,r=e.target!==document.querySelector("#toggle-menu"),o=e.target.closest(".nhsuk-header__navigation.js-show");n&&r&&!o&&t.classList.remove("js-show")}var i=document.querySelector(".nhsuk-subheader.is-active");if(i){var a=e.target!==i,s=e.target.closest(".nhsuk-subheader.is-active");a&&!s&&(i.classList.remove("is-active"),document.querySelector(".nhsuk-header__navigation-list").classList.remove("submenu-open"))}}o&&o.addEventListener("mousedown",(function(){document.querySelector("#toggle-menu").focus()})),document.addEventListener("keyup",(function(e){13===e.keyCode&&i(e)})),document.addEventListener("mousedown",i)};function o(e){return function(e){if(Array.isArray(e))return i(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e){return function(e){if(Array.isArray(e))return u(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return u(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?u(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const h=function(){var e,t=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.toggles=t.querySelectorAll("a"),console.log(this.container),console.log(this.toggles),this.addEventListeners()}var t,n;return t=e,(n=[{key:"addEventListeners",value:function(){var e=this;this.toggles&&this.toggles.forEach((function(t){return t.addEventListener("click",(function(t){return e.toggletranscript(t)}))}))}},{key:"toggletranscript",value:function(){this.isCollapsed()?this.container.classList.remove("hee-media__transcript-expanded"):this.container.classList.add("hee-media__transcript-expanded")}},{key:"isCollapsed",value:function(){return!!this.container.classList.contains("hee-media__transcript-expanded")}}])&&f(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();(e=document.getElementsByClassName("hee-media__transcript"),function(e){if(Array.isArray(e))return c(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return c(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?c(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).forEach((function(e){return new t(e)}))};function d(e){return function(e){if(Array.isArray(e))return y(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return y(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?y(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function y(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const g=function(){var e,t=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.newsletter=t,this.requiredInputs=t.querySelectorAll("[required]"),this.errors=[],this.init()}var t,n;return t=e,(n=[{key:"init",value:function(){this.resetForm(),this.addEvents()}},{key:"addEvents",value:function(){var e=this;this.requiredInputs.forEach((function(t){t.addEventListener("focusout",(function(t){return e.validate(t.target)}))}))}},{key:"validate",value:function(e){var t=document.getElementById("errors-"+e.name),n=document.getElementById("error-summary-"+e.name);"firstname"==e.name||"lastname"==e.name?this.errorEmpty(e,t,n):"email"==e.name?this.errorEmail(e,t,n):"consent"==e.name&&this.errorConsent(e,t,n),this.updateSummary()}},{key:"updateSummary",value:function(){var e=document.getElementById("error-summary");this.errors.length>0?e.style.display="block":e.style.display="none"}},{key:"errorEmpty",value:function(e,t,n){this.isEmpty(e.value)?this.showError(e,t,n):this.hideError(e,t,n)}},{key:"errorEmail",value:function(e,t,n){/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(e.value)?this.hideError(e,t,n):this.showError(e,t,n)}},{key:"errorConsent",value:function(e,t,n){e.checked?this.hideError(e,t,n):this.showError(e,t,n)}},{key:"hideError",value:function(e,t,n){e.parentElement.classList.remove("nhsuk-form-group--error"),t.style.display="none",n.style.display="none",this.errors=this.errors.filter((function(t){return t!==e.name}))}},{key:"showError",value:function(e,t,n){e.parentElement.classList.add("nhsuk-form-group--error"),t.style.display="block",n.style.display="block",this.errors=this.errors.filter((function(t){return t!==e.name})),this.errors.push(e.name)}},{key:"isEmpty",value:function(e){return!e.trim().length}},{key:"resetForm",value:function(){this.newsletter.querySelectorAll(".nhsuk-error-message").forEach((function(e){e.style.display="none"})),this.newsletter.querySelectorAll(".nhsuk-form-group--error").forEach((function(e){e.classList.remove("nhsuk-form-group--error")})),this.newsletter.querySelectorAll(".nhsuk-error-summary").forEach((function(e){e.style.display="none"})),this.newsletter.querySelectorAll(".error-summary-item").forEach((function(e){e.style.display="none"}))}}])&&p(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();(e=document.getElementsByClassName("nhsuk-newsletter-form"),function(e){if(Array.isArray(e))return v(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return v(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?v(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).forEach((function(e){return new t(e)}))};function k(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const E=function(){var e,t=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.tabcomponent=t,this.init()}var t,n;return t=e,n=[{key:"init",value:function(){var e=this,t=this.tabcomponent.querySelectorAll('[role="tab"]'),n=this.tabcomponent.querySelector('[role="tablist"]');t.forEach((function(t){t.addEventListener("click",(function(t){return e.changeTabs(t)}))}));var r=0;n.addEventListener("keydown",(function(e){39!==e.keyCode&&37!==e.keyCode||(t[r].setAttribute("tabindex",-1),39===e.keyCode?++r>=t.length&&(r=0):37===e.keyCode&&--r<0&&(r=t.length-1),t[r].setAttribute("tabindex",0),t[r].focus())}))}},{key:"changeTabs",value:function(e){var t=e.target,n=t.parentNode,r=n.parentNode,o=n.getElementsByClassName("nhsuk-tabs__list-item--selected")[0],i=r.classList.contains("nhsuk-tabs__mobile");t==o&&i?(this.removeSelected(n),this.hideTabs(r)):(this.removeSelected(n),this.setSelected(t),this.hideTabs(r),this.showSelected(r.parentNode,t))}},{key:"removeSelected",value:function(e){e.querySelectorAll('[aria-selected="true"]').forEach((function(e){return e.setAttribute("aria-selected",!1)})),e.querySelectorAll(".nhsuk-tabs__list-item--selected").forEach((function(e){return e.classList.remove("nhsuk-tabs__list-item--selected")}))}},{key:"setSelected",value:function(e){e.setAttribute("aria-selected",!0),e.classList.add("nhsuk-tabs__list-item--selected")}},{key:"hideTabs",value:function(e){e.querySelectorAll('[role="tabpanel"]').forEach((function(e){return e.setAttribute("hidden",!0)}))}},{key:"showSelected",value:function(e,t){e.querySelector("#".concat(t.getAttribute("aria-controls"))).removeAttribute("hidden")}}],n&&b(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();(e=document.getElementsByClassName("nhsuk-tabs"),function(e){if(Array.isArray(e))return k(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return k(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?k(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).forEach((function(e,n){return new t(e,n)}))};function w(e){return function(e){if(Array.isArray(e))return S(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return S(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?S(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function S(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function A(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function C(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const _=function(){var e,t=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.tag=t,this.icon=t.querySelector(".nhsuk-filter-tag__icon"),this.setUp(),this.addEventListeners()}var t,n;return t=e,(n=[{key:"addEventListeners",value:function(){var e=this;this.tag.addEventListener("click",(function(t){return e.removeFilter(t)}))}},{key:"removeFilter",value:function(e){e.preventDefault(),document.querySelectorAll("input[value='".concat(this.tag.dataset.filter,"']")).forEach((function(e){e.checked=!1,e.dispatchEvent(new Event("change"))})),e.target.remove()}},{key:"setUp",value:function(){this.tag.classList.add("nhsuk-filter-tag--js"),this.icon&&(this.icon.hidden=!1)}}])&&L(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();(e=document.getElementsByClassName("nhsuk-filter-tag"),function(e){if(Array.isArray(e))return C(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return C(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?C(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).forEach((function(e){return new t(e)}))};document.addEventListener("DOMContentLoaded",(function(){var t,n,i,u;E(),u=function(){function e(t){var n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.anchorLinks=t,this.anchorLinks.hidden=!0,this.foundHeadings=this.findHeadings(t.dataset.headings),null!==(n=this.foundHeadings)&&void 0!==n&&n.length&&this.addAnchorsToPage()}var t,n;return t=e,(n=[{key:"findHeadings",value:function(e){var t=[];return e&&document.querySelectorAll(e).forEach((function(e,n){e.id||(e.id=e.innerText.replace(/ .*/,"").replace(/[\n\r]/g,"").replace(/\s/g,"").toLowerCase()+n),t.push(e)})),t}},{key:"appearsOnRightPageColumn",value:function(e,t){return o(document.querySelectorAll(t)).some((function(t){return t!==e&&t.contains(e)}))}},{key:"addAnchorsToPage",value:function(){var e=this,t=document.createElement("ul");this.foundHeadings.forEach((function(n){if(!(n.dataset.anchorlinksignore||n.classList.contains("nhsuk-u-visually-hidden")||n.classList.contains("nhsuk-card__heading")||e.appearsOnRightPageColumn(n,".nhsuk-grid-column-one-third"))){var r=document.createElement("li"),o=document.createElement("a");o.href="#"+n.id;for(var i=n.getElementsByClassName("nhsuk-u-visually-hidden");i.length>0;)i[0].remove();o.innerText=n.innerText,o.innerHTML=o.innerHTML.replace(/<br\s*[\/]?>/gi," "),r.appendChild(o),t.appendChild(r)}})),this.anchorLinks.appendChild(t),this.anchorLinks.hidden=!1}}])&&a(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),o(document.getElementsByClassName("nhsuk-anchor-links")).forEach((function(e){return new u(e)})),new(function(){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.useCookies="",this.banner=document.querySelector(".nhsuk-cookie-banner"),this.showCookies=document.getElementById("showCookies"),this.removeCookies=document.getElementById("removeCookies"),this.host=this.getHost(),this.cookieStatus(),this.setCookies(),this.addEventListeners(),this.Status=document.querySelector(".nhsuk__cookieStatus"),this.In=document.querySelectorAll(".nhsuk__cookiesIn"),this.Out=document.querySelectorAll(".nhsuk__cookiesOut"),this.toggleStatus()}var n,r;return n=t,(r=[{key:"cookieStatus",value:function(){var e=this;document.cookie.split(";").forEach((function(t){if(t.match(new RegExp("(^| )analyticsCookie([^;]+)"))){var n=t.split("=")[1];e.useCookies=n}}))}},{key:"getHost",value:function(){return window.location.host.toString().split(":")[0]}},{key:"addEventListeners",value:function(){this.showCookies&&this.showCookies.addEventListener("mousedown",this.showCookie),this.removeCookies&&this.removeCookies.addEventListener("mousedown",this.removeCookie)}},{key:"bannerShow",value:function(){this.banner&&(this.banner.style.display="block")}},{key:"bannerHide",value:function(){this.banner&&(this.banner.style.display="none")}},{key:"setCookies",value:function(){var e=this;""===this.useCookies&&(this.bannerShow(),document.querySelector("#nhsuk-cookie-banner__link_accept_analytics").addEventListener("click",(function(t){t.preventDefault(),e.bannerHide(),e.useCookie()})),document.querySelector("#nhsuk-cookie-banner__link_decline_analytics").addEventListener("click",(function(t){t.preventDefault(),e.bannerHide(),e.noCookie()})))}},{key:"useCookie",value:function(){document.cookie="analyticsCookie=true; domain=".concat(this.host,"; max-age=7776000"),location.reload()}},{key:"noCookie",value:function(){document.cookie="analyticsCookie=false; domain=".concat(this.host,"; max-age=7776000"),location.reload()}},{key:"toggleStatus",value:function(){var e=this;this.Status&&(document.querySelector("button.nhsuk__cookiesOut").addEventListener("click",(function(t){t.preventDefault(),e.bannerHide(),e.useCookie(),location.reload()})),document.querySelector("button.nhsuk__cookiesIn").addEventListener("click",(function(t){t.preventDefault(),e.bannerHide(),e.noCookie(),location.reload()})),"false"===this.useCookies||""===this.useCookies?(this.displayBlock(this.Out),this.displayNone(this.In)):(this.displayNone(this.Out),this.displayBlock(this.In)))}},{key:"displayBlock",value:function(e){e.forEach((function(e){return e.style.display="inline-block"}))}},{key:"displayNone",value:function(e){e.forEach((function(e){return e.style.display="none"}))}},{key:"showCookie",value:function(){document.getElementById("cookies").textContent="> "+document.cookie}},{key:"removeCookie",value:function(){document.cookie="analyticsCookie=false; max-age=0",location.reload()}}])&&e(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}())(document),i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.checkboxes=w(this.container.getElementsByClassName("nhsuk-checkboxes__input")),this.groups=w(this.container.getElementsByClassName("nhsuk-filter__group")),this.submit=this.container.querySelector(".nhsuk-filter__submit"),this.setUp(),this.addEventListeners()}var t,n;return t=e,(n=[{key:"addEventListeners",value:function(){var e=this;this.checkboxes.forEach((function(t){t.addEventListener("change",(function(t){return e.updateResults(t)}))})),this.groups.forEach((function(t){var n=t.querySelector(".nhsuk-fieldset__legend");n&&n.addEventListener("click",(function(t){return e.toggleGroup(t)}))}))}},{key:"setUp",value:function(){this.container.classList.add("nhsuk-filter--js"),this.submit&&(this.submit.hidden=!0)}},{key:"toggleGroup",value:function(e){e.preventDefault(),e.target.closest(".nhsuk-filter__group").classList.toggle("nhsuk-filter__group--closed")}},{key:"updateResults",value:function(e){this.container.submit()}}])&&A(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),w(document.getElementsByClassName("nhsuk-filter")).forEach((function(e){return new i(e)})),_(),n=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.sort=this.container.querySelector(".nhsuk-listing__sort"),this.addEventListeners(),this.toggleJavascriptElements()}var t,n;return t=e,(n=[{key:"addEventListeners",value:function(){var e=this;this.sort&&s(this.sort.getElementsByTagName("select")).forEach((function(t){return t.addEventListener("change",(function(t){return e.updateResults(t)}))}))}},{key:"toggleJavascriptElements",value:function(){if(this.sort){var e=this.sort.querySelector(".nhsuk-listing__sort__submit");e&&(e.hidden=!0)}}},{key:"updateResults",value:function(){this.sort.submit()}}])&&l(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),s(document.getElementsByClassName("nhsuk-listing")).forEach((function(e){return new n(e)})),h(),t=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.map=t,this.svg=n,this.regions=d(n.getElementsByClassName("nhsuk-region")),this.list=d(t.querySelectorAll("#regionList li a")),this.addLinksToMap(),this.cleanStyle(),this.mapEventListeners(),this.linkEventListeners()}var t,n;return t=e,(n=[{key:"cleanStyle",value:function(){this.svg.querySelector("style").innerHTML="",this.svg.querySelector("style").appendChild(document.createTextNode("\n        .st0{fill:#005EB8;stroke:#FFFFFF;stroke-width:0.5;stroke-miterlimit:10;}\n        .st1{fill:#AEB7BD;stroke:#FFFFFF;stroke-width:0.5;stroke-miterlimit:10;}\n        .hover * {stroke:#ffeb3b;stroke-width: 6;stroke-miterlimit: 1;}\n        .focus .st0 {fill:#ffeb3b;stroke:#212b32;}\n        .focus * {stroke-width: 6;stroke-miterlimit: 1;}\n      "))}},{key:"addLinksToMap",value:function(){var e=this;this.regions.forEach((function(t){var n=e.mapCounterpart(t.id),r=n.href?n.href:"/",o=n.innerHTML?n.innerHTML:"",i=t.innerHTML,a='<a xlink:href="'.concat(r,'" xmlns:xlink="http://www.w3.org/1999/xlink">\n          <title>').concat(o,"</title>\n          ").concat(i,"\n        </a>");t.innerHTML=a}))}},{key:"mapEventListeners",value:function(){var e=this;this.regions.forEach((function(t){return t.addEventListener("mouseenter",(function(){return e.mapIn(t,"hover",!0)}))})),this.regions.forEach((function(t){return t.addEventListener("mouseout",(function(){return e.mapOut(t,"hover",!0)}))})),this.regions.forEach((function(t){return t.addEventListener("click",(function(t){return e.mapClick(t)}))}))}},{key:"linkEventListeners",value:function(){var e=this;this.list.forEach((function(t){return t.addEventListener("mouseenter",(function(t){return e.linkEvent(t.target,"in","hover")}))})),this.list.forEach((function(t){return t.addEventListener("mouseout",(function(t){return e.linkEvent(t.target,"out","hover")}))})),this.list.forEach((function(t){return t.addEventListener("focusin",(function(t){return e.linkEvent(t.target,"in","focus")}))})),this.list.forEach((function(t){return t.addEventListener("focusout",(function(t){return e.linkEvent(t.target,"out","focus")}))}))}},{key:"moveToTop",value:function(e){e.parentElement.appendChild(e)}},{key:"mapIn",value:function(e,t,n){if(this.moveToTop(e),e.classList.add(t),n){var r=this.mapCounterpart(e.id);r&&r.classList.add("hover")}}},{key:"mapOut",value:function(e,t,n){if(e.classList.remove(t),n){var r=this.mapCounterpart(e.id);r&&r.classList.remove("hover")}}},{key:"mapClick",value:function(e){e.preventDefault();var t=this.mapCounterpart(e.target.closest("g").id);t&&t.click()}},{key:"mapCounterpart",value:function(e){return this.list.find((function(t){return t.id===e}))}},{key:"linkEvent",value:function(e,t,n){var r=e.id,o=this.linkCounterpart(r);"in"===t?this.mapIn(o,n):this.mapOut(o,n)}},{key:"linkCounterpart",value:function(e){return this.regions.find((function(t){return t.id===e}))}}])&&m(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),d(document.querySelectorAll(".nhsuk-map")).forEach((function(e){var n=e.querySelector("object");n.addEventListener("load",(function(){var r=n.getSVGDocument().querySelector("svg");r&&new t(e,r)}))})),r(),g()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QXdHbkIsRUFBSTdNLFNBQVNDLGlCQUFpQixlQUFlQyxTQUFRLFNBQUFrTCxHQUVuRCxJQUFNb0IsRUFBTXBCLEVBQUk3TCxjQUFjLFVBQzlCaU4sRUFBSTdNLGlCQUFpQixRQUFRLFdBQzNCLElBQU0wTCxFQUFNbUIsRUFBSVUsaUJBQWlCM04sY0FBYyxPQUM1QzhMLEdBQ0QsSUFBSXhFLEVBQU91RSxFQUFLQyxTRGhGdEI4QixJQUNBekssUSIsInNvdXJjZXMiOlsid2VicGFjazovL0hFRS1wcm90b3R5cGVzLy4vYXBwL2Fzc2V0cy9jb21wb25lbnRzL25oc3VrLWhlZS9uaHN1ay1oZWUtaGVhZGVyL3N1Ym1lbnUuanMiLCJ3ZWJwYWNrOi8vSEVFLXByb3RvdHlwZXMvLi9hcHAvYXNzZXRzL2NvbXBvbmVudHMvaGVlL2hlZS1tZWRpYS9tZWRpYS5qcyIsIndlYnBhY2s6Ly9IRUUtcHJvdG90eXBlcy8uL2FwcC9hc3NldHMvY29tcG9uZW50cy9oZWUvaGVlLW5ld3NsZXR0ZXIvbmV3c2xldHRlci5qcyIsIndlYnBhY2s6Ly9IRUUtcHJvdG90eXBlcy8uL2FwcC9hc3NldHMvY29tcG9uZW50cy9oZWUvaGVlLXRhYnMvdGFicy5qcyIsIndlYnBhY2s6Ly9IRUUtcHJvdG90eXBlcy8uL2FwcC9hc3NldHMvY29tcG9uZW50cy9oZWUvaGVlLWZpbHRlcnRhZy9maWx0ZXJ0YWcuanMiLCJ3ZWJwYWNrOi8vSEVFLXByb3RvdHlwZXMvLi9hcHAvYXNzZXRzL2phdmFzY3JpcHQvaGVlLmpzIiwid2VicGFjazovL0hFRS1wcm90b3R5cGVzLy4vYXBwL2Fzc2V0cy9jb21wb25lbnRzL2hlZS9oZWUtbmF2bWFwL25hdm1hcC5qcyIsIndlYnBhY2s6Ly9IRUUtcHJvdG90eXBlcy8uL2FwcC9hc3NldHMvY29tcG9uZW50cy9oZWUvaGVlLWxpc3RpbmcvbGlzdGluZy5qcyIsIndlYnBhY2s6Ly9IRUUtcHJvdG90eXBlcy8uL2FwcC9hc3NldHMvY29tcG9uZW50cy9oZWUvaGVlLWZpbHRlci9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vSEVFLXByb3RvdHlwZXMvLi9hcHAvYXNzZXRzL2NvbXBvbmVudHMvaGVlL2hlZS1hbmNob3JsaW5rcy9hbmNob3JsaW5rcy5qcyIsIndlYnBhY2s6Ly9IRUUtcHJvdG90eXBlcy8uL2FwcC9hc3NldHMvc2NhZmZvbGRpbmcvY29va2llcy9jb29raWVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBTdWJtZW51J3NcbiogRWxlbWVudHMgd2l0aCB0aGUgc2VsZWN0b3IgJy5uaHN1ay1zdWJoZWFkZXInIGFyZSBwYXNzZWQgaW50byB0aGlzIGNsYXNzXG4qL1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIGNsYXNzIFN1Ym1lbnUge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lcikge1xuICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXJcbiAgICAgIHRoaXMudG9nZ2xlTGluayA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ2EnKVxuICAgICAgdGhpcy5wYXJlbnRMaXN0ID0gdGhpcy5jb250YWluZXIucGFyZW50Tm9kZVxuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpXG4gICAgfVxuXG4gICAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICBpZiAodGhpcy50b2dnbGVMaW5rKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlTGluay5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBldmVudCA9PiB0aGlzLnRvZ2dsZU1lbnUoZXZlbnQpKVxuICAgICAgICB0aGlzLnRvZ2dsZUxpbmsuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBldmVudCA9PiB7XG4gICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDEzKSB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZU1lbnUoZXZlbnQpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZVN0YXRlKCl7XG4gICAgICBjb25zdCBhY3RpdmVFbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubmhzdWstc3ViaGVhZGVyLmlzLWFjdGl2ZVwiKVxuICAgICAgYWN0aXZlRWxlbXMuZm9yRWFjaChlbGVtID0+IHtcbiAgICAgICAgaWYoZWxlbSAhPSB0aGlzLmNvbnRhaW5lcil7XG4gICAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKFwiaXMtYWN0aXZlXCIpXG4gICAgICAgICAgZWxlbS50b2dnbGVBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy50b2dnbGVDbGFzcyh0aGlzLnBhcmVudExpc3QsICdzdWJtZW51LW9wZW4nKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgaWYoYWN0aXZlRWxlbXMubGVuZ3RoID09PSAwKXtcbiAgICAgICAgdGhpcy50b2dnbGVDbGFzcyh0aGlzLnBhcmVudExpc3QsICdzdWJtZW51LW9wZW4nKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRvZ2dsZU1lbnUoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIHRoaXMuaGFuZGxlU3RhdGUoKVxuICAgICAgdGhpcy50b2dnbGVDbGFzcyh0aGlzLmNvbnRhaW5lciwgXCJpcy1hY3RpdmVcIilcbiAgICAgIHRoaXMudG9nZ2xlQXR0cmlidXRlKHRoaXMuY29udGFpbmVyLCBcImFyaWEtZXhwYW5kZWRcIilcbiAgICB9XG5cbiAgICB0b2dnbGVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICAgIGlmICghZWxlbWVudCB8fCAhY2xhc3NOYW1lKSByZXR1cm5cbiAgICAgIGNvbnN0IGhhc0NsYXNzID0gZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKVxuICAgICAgaWYgKGhhc0NsYXNzKSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRvZ2dsZUF0dHJpYnV0ZShlbGVtZW50LCBhdHRyKSB7XG4gICAgICAvLyBSZXR1cm4gd2l0aG91dCBlcnJvciBpZiBlbGVtZW50IG9yIGF0dHIgYXJlIG1pc3NpbmdcbiAgICAgIGlmICghZWxlbWVudCB8fCAhYXR0cikgcmV0dXJuXG4gICAgICAvLyBUb2dnbGUgYXR0cmlidXRlIHZhbHVlLiBUcmVhdCBubyBleGlzdGluZyBhdHRyIHNhbWUgYXMgd2hlbiBzZXQgdG8gZmFsc2VcbiAgICAgIGNvbnN0IHZhbHVlID0gKGVsZW1lbnQuZ2V0QXR0cmlidXRlKGF0dHIpID09PSAndHJ1ZScpID8gJ2ZhbHNlJyA6ICd0cnVlJ1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoYXR0ciwgdmFsdWUpXG4gICAgfVxuXG4gIH1cblxuICBbLi4uZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbmhzdWstc3ViaGVhZGVyJyldLmZvckVhY2goc3VibWVudSA9PiBuZXcgU3VibWVudShzdWJtZW51KSlcblxuICAvKiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNsb3NlLW1lbnVcIikuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24oKXtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvZ2dsZS1tZW51XCIpLmZvY3VzKClcbiAgfSkgKi9cblxuICBjb25zdCBjbG9zZU1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Nsb3NlLW1lbnVcIik7XG5cbiAgY2xvc2VNZW51ICYmIGNsb3NlTWVudS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbigpe1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdG9nZ2xlLW1lbnVcIikuZm9jdXMoKVxuICB9KVxuXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZXZlbnQgPT4ge1xuICAgIGlmIChldmVudC5rZXlDb2RlID09PSAxMykge1xuICAgICAgdXNlcklucHV0KGV2ZW50KVxuICAgIH1cbiAgfSlcblxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB1c2VySW5wdXQpIFxuICBcbiAgZnVuY3Rpb24gdXNlcklucHV0KGV2ZW50KSB7XG4gICAgLy8gY2xvc2UgbWVudSBpZiBjbGlja2luZyBvdXRzaWRlXG4gICAgY29uc3Qgb3Blbk1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5oc3VrLWhlYWRlcl9fbmF2aWdhdGlvbi5qcy1zaG93XCIpXG4gICAgaWYob3Blbk1lbnUpe1xuICAgICAgY29uc3QgaXNOb3RNZW51ID0gZXZlbnQudGFyZ2V0ICE9PSBvcGVuTWVudVxuICAgICAgY29uc3QgaXNOb3RNZW51QnV0dG9uID0gZXZlbnQudGFyZ2V0ICE9PSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3RvZ2dsZS1tZW51XCIpXG4gICAgICBjb25zdCBpc01lbnVDaGlsZCA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KFwiLm5oc3VrLWhlYWRlcl9fbmF2aWdhdGlvbi5qcy1zaG93XCIpXG4gICAgICBpZihpc05vdE1lbnUgJiYgaXNOb3RNZW51QnV0dG9uICYmICFpc01lbnVDaGlsZCl7XG4gICAgICAgIG9wZW5NZW51LmNsYXNzTGlzdC5yZW1vdmUoXCJqcy1zaG93XCIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIGNsb3NlIHN1YiBuYXYgaWYgY2xpY2tpbmcgYW55d2hlcmUgb24gdGhlIGRvY3VtZW50IGV4Y2VwdCB0aGUgb3BlbiBvciBhIG5ldyBzdWJuYXZcbiAgICBjb25zdCBvcGVuU3ViID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uaHN1ay1zdWJoZWFkZXIuaXMtYWN0aXZlXCIpXG4gICAgaWYob3BlblN1Yil7XG4gICAgICBjb25zdCBpc05vdFN1YiA9IGV2ZW50LnRhcmdldCAhPT0gb3BlblN1YlxuICAgICAgY29uc3QgaXNTdWJDaGlsZCA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KFwiLm5oc3VrLXN1YmhlYWRlci5pcy1hY3RpdmVcIilcbiAgICAgIGlmKGlzTm90U3ViICYmICFpc1N1YkNoaWxkKXtcbiAgICAgICAgb3BlblN1Yi5jbGFzc0xpc3QucmVtb3ZlKFwiaXMtYWN0aXZlXCIpXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmhzdWstaGVhZGVyX19uYXZpZ2F0aW9uLWxpc3RcIikuY2xhc3NMaXN0LnJlbW92ZShcInN1Ym1lbnUtb3BlblwiKVxuICAgICAgfVxuICAgIH1cbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgLyoqXG4gICogTWVkaWEgdHJhbnNjcmlwdFxuICAqIEVsZW1lbnRzIHdpdGggdGhlIHNlbGVjdG9yICcubmhzdWstdHJhbnNjcmlwdCcgYXJlIHBhc3NlZCBpbnRvIHRoaXMgY2xhc3NcbiAgKi9cbiAgY2xhc3MgVHJhbnNjcmlwdCB7XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyKSB7XG4gICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lclxuICAgICAgdGhpcy50b2dnbGVzID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCJhXCIpXG5cbiAgICAgIGNvbnNvbGUubG9nKHRoaXMuY29udGFpbmVyKVxuICAgICAgY29uc29sZS5sb2codGhpcy50b2dnbGVzKVxuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpXG4gICAgfVxuXG4gICAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICBpZiAodGhpcy50b2dnbGVzKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlcy5mb3JFYWNoKHRvZ2dsZSA9PiB0b2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldnQgPT4gdGhpcy50b2dnbGV0cmFuc2NyaXB0KGV2dCkpKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRvZ2dsZXRyYW5zY3JpcHQoKSB7XG4gICAgICBpZiAodGhpcy5pc0NvbGxhcHNlZCgpKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJoZWUtbWVkaWFfX3RyYW5zY3JpcHQtZXhwYW5kZWRcIilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJoZWUtbWVkaWFfX3RyYW5zY3JpcHQtZXhwYW5kZWRcIilcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpc0NvbGxhcHNlZCgpIHtcbiAgICAgIGlmKHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5jb250YWlucyhcImhlZS1tZWRpYV9fdHJhbnNjcmlwdC1leHBhbmRlZFwiKSl7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG4gIFsuLi5kb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdoZWUtbWVkaWFfX3RyYW5zY3JpcHQnKV0uZm9yRWFjaCh0cmFuc2NyaXB0ID0+IG5ldyBUcmFuc2NyaXB0KHRyYW5zY3JpcHQpKVxufSIsImV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgLyoqXG4gICogTmV3c2xldHRlclxuICAqIEVsZW1lbnRzIHdpdGggdGhlIHNlbGVjdG9yICduaHN1ay1uZXdzbGV0dGVyLWZvcm0nIGFyZSBwYXNzZWQgaW50byB0aGlzIGNsYXNzXG4gICovXG4gIGNsYXNzIE5ld3NsZXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKG5ld3NsZXR0ZXIpIHtcbiAgICAgIHRoaXMubmV3c2xldHRlciA9IG5ld3NsZXR0ZXI7XG4gICAgICB0aGlzLnJlcXVpcmVkSW5wdXRzID0gbmV3c2xldHRlci5xdWVyeVNlbGVjdG9yQWxsKFwiW3JlcXVpcmVkXVwiKTtcbiAgICAgIHRoaXMuZXJyb3JzID0gW107XG4gICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgdGhpcy5yZXNldEZvcm0oKTtcbiAgICAgIHRoaXMuYWRkRXZlbnRzKCkgICAgICA7XG4gICAgfVxuICAgIFxuICAgIGFkZEV2ZW50cygpIHtcbiAgICAgIHRoaXMucmVxdWlyZWRJbnB1dHMuZm9yRWFjaChpbnB1dCA9PiB7XG4gICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c291dFwiLCBjID0+IHRoaXMudmFsaWRhdGUoYy50YXJnZXQpKTtcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgdmFsaWRhdGUodGFyZ2V0KSB7XG4gICAgICB2YXIgdGFyZ2V0RXJyb3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVycm9ycy1cIit0YXJnZXQubmFtZSk7XG4gICAgICB2YXIgdGFyZ2V0U3VtbWFyeUVycm9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJlcnJvci1zdW1tYXJ5LVwiK3RhcmdldC5uYW1lKTtcbiAgICAgIGlmICh0YXJnZXQubmFtZSA9PSBcImZpcnN0bmFtZVwiIHx8IHRhcmdldC5uYW1lID09IFwibGFzdG5hbWVcIikge1xuICAgICAgICB0aGlzLmVycm9yRW1wdHkodGFyZ2V0LCB0YXJnZXRFcnJvciwgdGFyZ2V0U3VtbWFyeUVycm9yKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRhcmdldC5uYW1lID09IFwiZW1haWxcIikge1xuICAgICAgICB0aGlzLmVycm9yRW1haWwodGFyZ2V0LCB0YXJnZXRFcnJvciwgdGFyZ2V0U3VtbWFyeUVycm9yKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRhcmdldC5uYW1lID09IFwiY29uc2VudFwiKSB7XG4gICAgICAgIHRoaXMuZXJyb3JDb25zZW50KHRhcmdldCwgdGFyZ2V0RXJyb3IsIHRhcmdldFN1bW1hcnlFcnJvcik7XG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZVN1bW1hcnkoKTtcbiAgICB9XG5cbiAgICB1cGRhdGVTdW1tYXJ5KCkge1xuICAgICAgdmFyIGVycm9yU3VtbWFyeSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZXJyb3Itc3VtbWFyeVwiKTtcbiAgICAgIGlmICh0aGlzLmVycm9ycy5sZW5ndGggPiAwKVxuICAgICAgeyAgICAgICAgXG4gICAgICAgIGVycm9yU3VtbWFyeS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBlcnJvclN1bW1hcnkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBlcnJvckVtcHR5KHRhcmdldCwgdGFyZ2V0RXJyb3IsIHRhcmdldFN1bW1hcnlFcnJvcikge1xuICAgICAgaWYgKHRoaXMuaXNFbXB0eSh0YXJnZXQudmFsdWUpKSB7ICAgICAgICBcbiAgICAgICAgdGhpcy5zaG93RXJyb3IodGFyZ2V0LCB0YXJnZXRFcnJvciwgdGFyZ2V0U3VtbWFyeUVycm9yKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmhpZGVFcnJvcih0YXJnZXQsIHRhcmdldEVycm9yLCB0YXJnZXRTdW1tYXJ5RXJyb3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGVycm9yRW1haWwodGFyZ2V0LCB0YXJnZXRFcnJvciwgdGFyZ2V0U3VtbWFyeUVycm9yKSB7XG4gICAgICB2YXIgcmUgPSAvXigoW148PigpW1xcXVxcXFwuLDs6XFxzQFxcXCJdKyhcXC5bXjw+KClbXFxdXFxcXC4sOzpcXHNAXFxcIl0rKSopfChcXFwiLitcXFwiKSlAKChcXFtbMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFxdKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkLztcbiAgICAgIGlmICghcmUudGVzdCh0YXJnZXQudmFsdWUpKSB7ICAgICAgICBcbiAgICAgICAgdGhpcy5zaG93RXJyb3IodGFyZ2V0LCB0YXJnZXRFcnJvciwgdGFyZ2V0U3VtbWFyeUVycm9yKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmhpZGVFcnJvcih0YXJnZXQsIHRhcmdldEVycm9yLCB0YXJnZXRTdW1tYXJ5RXJyb3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGVycm9yQ29uc2VudCh0YXJnZXQsIHRhcmdldEVycm9yLCB0YXJnZXRTdW1tYXJ5RXJyb3IpIHtcbiAgICAgIGlmICghdGFyZ2V0LmNoZWNrZWQpIHtcbiAgICAgICAgdGhpcy5zaG93RXJyb3IodGFyZ2V0LCB0YXJnZXRFcnJvciwgdGFyZ2V0U3VtbWFyeUVycm9yKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmhpZGVFcnJvcih0YXJnZXQsIHRhcmdldEVycm9yLCB0YXJnZXRTdW1tYXJ5RXJyb3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhpZGVFcnJvcih0YXJnZXQsIHRhcmdldEVycm9yLCB0YXJnZXRTdW1tYXJ5RXJyb3IpIHtcbiAgICAgIHRhcmdldC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ25oc3VrLWZvcm0tZ3JvdXAtLWVycm9yJyk7XG4gICAgICB0YXJnZXRFcnJvci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgdGFyZ2V0U3VtbWFyeUVycm9yLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLmZpbHRlcihpdGVtID0+IGl0ZW0gIT09IHRhcmdldC5uYW1lKTtcbiAgICB9XG5cbiAgICBzaG93RXJyb3IodGFyZ2V0LCB0YXJnZXRFcnJvciwgdGFyZ2V0U3VtbWFyeUVycm9yKSB7XG4gICAgICB0YXJnZXQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCduaHN1ay1mb3JtLWdyb3VwLS1lcnJvcicpO1xuICAgICAgdGFyZ2V0RXJyb3Iuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICB0YXJnZXRTdW1tYXJ5RXJyb3Iuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLmZpbHRlcihpdGVtID0+IGl0ZW0gIT09IHRhcmdldC5uYW1lKTtcbiAgICAgIHRoaXMuZXJyb3JzLnB1c2godGFyZ2V0Lm5hbWUpO1xuICAgIH1cblxuICAgIGlzRW1wdHkoc3RyKSB7XG4gICAgICByZXR1cm4gIXN0ci50cmltKCkubGVuZ3RoO1xuICAgIH1cblxuICAgIHJlc2V0Rm9ybSgpIHtcbiAgICAgIGNvbnN0IGVycm9ycyA9IHRoaXMubmV3c2xldHRlci5xdWVyeVNlbGVjdG9yQWxsKCcubmhzdWstZXJyb3ItbWVzc2FnZScpO1xuICAgICAgZXJyb3JzLmZvckVhY2goZXJyb3IgPT4ge1xuICAgICAgICBlcnJvci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgfSlcbiAgICAgIGNvbnN0IGVycm9yQ2xhc3NlcyA9IHRoaXMubmV3c2xldHRlci5xdWVyeVNlbGVjdG9yQWxsKCcubmhzdWstZm9ybS1ncm91cC0tZXJyb3InKTtcbiAgICAgIGVycm9yQ2xhc3Nlcy5mb3JFYWNoKGVycm9yY2xhc3MgPT4ge1xuICAgICAgICBlcnJvcmNsYXNzLmNsYXNzTGlzdC5yZW1vdmUoJ25oc3VrLWZvcm0tZ3JvdXAtLWVycm9yJyk7XG4gICAgICB9KVxuICAgICAgY29uc3QgZXJyb3JTdW1tYXJ5ID0gdGhpcy5uZXdzbGV0dGVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5uaHN1ay1lcnJvci1zdW1tYXJ5Jyk7XG4gICAgICBlcnJvclN1bW1hcnkuZm9yRWFjaChlcnJvcnN1bW1hcnkgPT4ge1xuICAgICAgICBlcnJvcnN1bW1hcnkuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIH0pXG4gICAgICBjb25zdCBlcnJvclN1bW1hcnlJdGVtcyA9IHRoaXMubmV3c2xldHRlci5xdWVyeVNlbGVjdG9yQWxsKCcuZXJyb3Itc3VtbWFyeS1pdGVtJyk7XG4gICAgICBlcnJvclN1bW1hcnlJdGVtcy5mb3JFYWNoKHN1bW1hcnlpdGVtID0+IHtcbiAgICAgICAgc3VtbWFyeWl0ZW0uc3R5bGUuZGlzcGxheSAgPSAnbm9uZSc7XG4gICAgICB9KVxuICAgIH1cbiAgfVxuICBbLi4uZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbmhzdWstbmV3c2xldHRlci1mb3JtJyldLmZvckVhY2goKG5ld3NsZXR0ZXIpID0+IG5ldyBOZXdzbGV0dGVyKG5ld3NsZXR0ZXIpKTtcbn0iLCJleHBvcnQgZGVmYXVsdCAoKSA9PiB7XHJcbiAgLyoqXHJcbiAgKiBUYWJzXHJcbiAgKiBFbGVtZW50cyB3aXRoIHRoZSBzZWxlY3RvciAnLm5oc3VrLXRhYnMnIGFyZSBwYXNzZWQgaW50byB0aGlzIGNsYXNzXHJcbiAgKi9cclxuICBjbGFzcyBUYWJzIHtcclxuICAgIGNvbnN0cnVjdG9yKHRhYmNvbXBvbmVudCwgaSkge1xyXG4gICAgICB0aGlzLnRhYmNvbXBvbmVudCA9IHRhYmNvbXBvbmVudFxyXG4gICAgICB0aGlzLmluaXQoKVxyXG4gICAgfVxyXG5cclxuICAgIGluaXQoKSB7XHJcbiAgICAgIGNvbnN0IHRhYnMgPSB0aGlzLnRhYmNvbXBvbmVudC5xdWVyeVNlbGVjdG9yQWxsKCdbcm9sZT1cInRhYlwiXScpXHJcbiAgICAgIGNvbnN0IHRhYkxpc3QgPSB0aGlzLnRhYmNvbXBvbmVudC5xdWVyeVNlbGVjdG9yKCdbcm9sZT1cInRhYmxpc3RcIl0nKVxyXG4gICAgICB0YWJzLmZvckVhY2godGFiID0+IHtcclxuICAgICAgICB0YWIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGMgPT4gdGhpcy5jaGFuZ2VUYWJzKGMpKVxyXG4gICAgICB9KVxyXG4gICAgICBsZXQgdGFiRm9jdXMgPSAwXHJcbiAgICAgIHRhYkxpc3QuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZSA9PiB7XHJcbiAgICAgICAgLy8gTW92ZSByaWdodFxyXG4gICAgICAgIGlmIChlLmtleUNvZGUgPT09IDM5IHx8IGUua2V5Q29kZSA9PT0gMzcpIHtcclxuICAgICAgICAgIHRhYnNbdGFiRm9jdXNdLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIC0xKVxyXG4gICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMzkpIHtcclxuICAgICAgICAgICAgdGFiRm9jdXMrK1xyXG4gICAgICAgICAgICAvLyBJZiB3ZSdyZSBhdCB0aGUgZW5kLCBnbyB0byB0aGUgc3RhcnRcclxuICAgICAgICAgICAgaWYgKHRhYkZvY3VzID49IHRhYnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgdGFiRm9jdXMgPSAwXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gTW92ZSBsZWZ0XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gMzcpIHtcclxuICAgICAgICAgICAgdGFiRm9jdXMtLVxyXG4gICAgICAgICAgICAvLyBJZiB3ZSdyZSBhdCB0aGUgc3RhcnQsIG1vdmUgdG8gdGhlIGVuZFxyXG4gICAgICAgICAgICBpZiAodGFiRm9jdXMgPCAwKSB7XHJcbiAgICAgICAgICAgICAgdGFiRm9jdXMgPSB0YWJzLmxlbmd0aCAtIDFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGFic1t0YWJGb2N1c10uc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgMClcclxuICAgICAgICAgIHRhYnNbdGFiRm9jdXNdLmZvY3VzKClcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcblxyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZVRhYnMoZSkge1xyXG4gICAgICAvLyBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXRcclxuICAgICAgLy8gY29uc29sZS5sb2codGFyZ2V0KTtcclxuICAgICAgY29uc3QgcGFyZW50ID0gdGFyZ2V0LnBhcmVudE5vZGVcclxuICAgICAgLy8gY29uc29sZS5sb2cocGFyZW50KTtcclxuICAgICAgY29uc3QgZ3JhbmRwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZVxyXG4gICAgICAvLyBjb25zb2xlLmxvZyhncmFuZHBhcmVudCk7XHJcbiAgICAgIGNvbnN0IHNlbGVjdGVkID0gcGFyZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25oc3VrLXRhYnNfX2xpc3QtaXRlbS0tc2VsZWN0ZWQnKVswXTtcclxuICAgICAgLy8gY29uc29sZS5sb2coc2VsZWN0ZWQpXHJcbiAgICAgIGNvbnN0IGlzX21vYmlsZSA9IGdyYW5kcGFyZW50LmNsYXNzTGlzdC5jb250YWlucygnbmhzdWstdGFic19fbW9iaWxlJyk7XHJcbiAgICAgIC8vY29uc29sZS5sb2coaXNfbW9iaWxlKVxyXG5cclxuICAgICAgLy8gQ29tcGFyZSBzZWxlY3RlZCBhbmQgdGFyZ2V0LCBhbmQgaWYgb24gbW9iaWxlXHJcbiAgICAgIC8vIENsb3NlIHRoZSB0YWIgaWYgYWxyZWFkeSBvcGVuXHJcbiAgICAgIGlmKHRhcmdldCA9PSBzZWxlY3RlZCAmJiBpc19tb2JpbGUpIHtcclxuICAgICAgICAvLyBVbnNlbGVjdCBhbGwgdGFic1xyXG4gICAgICAgIHRoaXMucmVtb3ZlU2VsZWN0ZWQocGFyZW50KVxyXG4gICAgICAgIC8vIEhpZGUgYWxsIHRhYnNcclxuICAgICAgICB0aGlzLmhpZGVUYWJzKGdyYW5kcGFyZW50KVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIFJlbW92ZSBhbGwgY3VycmVudCBzZWxlY3RlZCB0YWJzXHJcbiAgICAgICAgdGhpcy5yZW1vdmVTZWxlY3RlZChwYXJlbnQpXHJcblxyXG4gICAgICAgIC8vIFNldCB0aGlzIHRhYiBhcyBzZWxlY3RlZFxyXG4gICAgICAgIHRoaXMuc2V0U2VsZWN0ZWQodGFyZ2V0KVxyXG5cclxuICAgICAgICAvLyBIaWRlIGFsbCB0YWIgcGFuZWxzXHJcbiAgICAgICAgdGhpcy5oaWRlVGFicyhncmFuZHBhcmVudClcclxuXHJcbiAgICAgICAgLy8gU2hvdyB0aGUgc2VsZWN0ZWQgcGFuZWxcclxuICAgICAgICB0aGlzLnNob3dTZWxlY3RlZChncmFuZHBhcmVudC5wYXJlbnROb2RlLCB0YXJnZXQpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZVNlbGVjdGVkKGVsZSkge1xyXG4gICAgICBlbGVcclxuICAgICAgICAucXVlcnlTZWxlY3RvckFsbCgnW2FyaWEtc2VsZWN0ZWQ9XCJ0cnVlXCJdJylcclxuICAgICAgICAuZm9yRWFjaCh0ID0+IHQuc2V0QXR0cmlidXRlKFwiYXJpYS1zZWxlY3RlZFwiLCBmYWxzZSkpO1xyXG4gICAgICBlbGVcclxuICAgICAgICAucXVlcnlTZWxlY3RvckFsbCgnLm5oc3VrLXRhYnNfX2xpc3QtaXRlbS0tc2VsZWN0ZWQnKVxyXG4gICAgICAgIC5mb3JFYWNoKGMgPT4gYy5jbGFzc0xpc3QucmVtb3ZlKFwibmhzdWstdGFic19fbGlzdC1pdGVtLS1zZWxlY3RlZFwiKSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0U2VsZWN0ZWQoZWxlKSB7XHJcbiAgICAgIGVsZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXNlbGVjdGVkXCIsIHRydWUpXHJcbiAgICAgIGVsZS5jbGFzc0xpc3QuYWRkKFwibmhzdWstdGFic19fbGlzdC1pdGVtLS1zZWxlY3RlZFwiKVxyXG4gICAgfVxyXG5cclxuICAgIGhpZGVUYWJzKGVsZSkge1xyXG4gICAgICBlbGVcclxuICAgICAgICAucXVlcnlTZWxlY3RvckFsbCgnW3JvbGU9XCJ0YWJwYW5lbFwiXScpXHJcbiAgICAgICAgLmZvckVhY2gocCA9PiBwLnNldEF0dHJpYnV0ZShcImhpZGRlblwiLCB0cnVlKSlcclxuICAgIH1cclxuXHJcbiAgICBzaG93U2VsZWN0ZWQoZWxlLCB0YXJnZXQpIHtcclxuICAgICAgLy8gY29uc29sZS5sb2coZWxlLnF1ZXJ5U2VsZWN0b3IoYCMke3RhcmdldC5nZXRBdHRyaWJ1dGUoXCJhcmlhLWNvbnRyb2xzXCIpfWApKVxyXG4gICAgICBlbGVcclxuICAgICAgICAucXVlcnlTZWxlY3RvcihgIyR7dGFyZ2V0LmdldEF0dHJpYnV0ZShcImFyaWEtY29udHJvbHNcIil9YClcclxuICAgICAgICAucmVtb3ZlQXR0cmlidXRlKFwiaGlkZGVuXCIpXHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgWy4uLmRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25oc3VrLXRhYnMnKV0uZm9yRWFjaCgodGFicywgaSkgPT4gbmV3IFRhYnModGFicywgaSkpO1xyXG59IiwiZXhwb3J0IGRlZmF1bHQgKCkgPT4ge1xuICAvKipcbiAgKiBGaWx0ZXJUYWdcbiAgKiBFbGVtZW50cyB3aXRoIHRoZSBzZWxlY3RvciAnLm5oc3VrLWZpbHRlci10YWcnIGFyZSBwYXNzZWQgaW50byB0aGlzIGNsYXNzXG4gICovXG4gIGNsYXNzIEZpbHRlclRhZyB7XG4gICAgY29uc3RydWN0b3IodGFnKSB7XG4gICAgICB0aGlzLnRhZyA9IHRhZztcbiAgICAgIHRoaXMuaWNvbiA9IHRhZy5xdWVyeVNlbGVjdG9yKCcubmhzdWstZmlsdGVyLXRhZ19faWNvbicpO1xuXG4gICAgICB0aGlzLnNldFVwKCk7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICB0aGlzLnRhZy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldnQpID0+IHRoaXMucmVtb3ZlRmlsdGVyKGV2dCkpO1xuICAgIH1cblxuICAgIHJlbW92ZUZpbHRlcihldnQpIHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGBpbnB1dFt2YWx1ZT0nJHt0aGlzLnRhZy5kYXRhc2V0LmZpbHRlcn0nXWApLmZvckVhY2goY2hlY2tib3ggPT4ge1xuICAgICAgICBjaGVja2JveC5jaGVja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrYm94LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjaGFuZ2UnKSk7XG4gICAgICB9KTtcblxuICAgICAgZXZ0LnRhcmdldC5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICBzZXRVcCgpIHtcbiAgICAgIHRoaXMudGFnLmNsYXNzTGlzdC5hZGQoJ25oc3VrLWZpbHRlci10YWctLWpzJyk7XG5cbiAgICAgIGlmICh0aGlzLmljb24pIHtcbiAgICAgICAgdGhpcy5pY29uLmhpZGRlbiA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIFsuLi5kb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCduaHN1ay1maWx0ZXItdGFnJyldLmZvckVhY2godGFnID0+IG5ldyBGaWx0ZXJUYWcodGFnKSk7XG59IiwiLy8gTkhTVUstSEVFIENvbXBvbmVudHNcbmltcG9ydCBDb29raWVzIGZyb20gJy4uL3NjYWZmb2xkaW5nL2Nvb2tpZXMvY29va2llcyc7XG5pbXBvcnQgU3ViTWVudSBmcm9tICcuLi9jb21wb25lbnRzL25oc3VrLWhlZS9uaHN1ay1oZWUtaGVhZGVyL3N1Ym1lbnUnO1xuXG4vLyBIRUUgQ29tcG9uZW50c1xuaW1wb3J0IEFuY2hvckxpbmtzIGZyb20gJy4uL2NvbXBvbmVudHMvaGVlL2hlZS1hbmNob3JsaW5rcy9hbmNob3JsaW5rcyc7XG5pbXBvcnQgTGlzdGluZyBmcm9tICcuLi9jb21wb25lbnRzL2hlZS9oZWUtbGlzdGluZy9saXN0aW5nJztcbmltcG9ydCBNZWRpYSBmcm9tICcuLi9jb21wb25lbnRzL2hlZS9oZWUtbWVkaWEvbWVkaWEnO1xuaW1wb3J0IE5hdk1hcCBmcm9tICcuLi9jb21wb25lbnRzL2hlZS9oZWUtbmF2bWFwL25hdm1hcCc7XG5pbXBvcnQgTmV3c2xldHRlciBmcm9tICcuLi9jb21wb25lbnRzL2hlZS9oZWUtbmV3c2xldHRlci9uZXdzbGV0dGVyJztcbi8vaW1wb3J0IERldGFpbHNDYXJkIGZyb20gJy4uL2NvbXBvbmVudHMvaGVlL2hlZS1kZXRhaWxzY2FyZC9kZXRhaWxzY2FyZCc7XG5pbXBvcnQgVGFicyBmcm9tICcuLi9jb21wb25lbnRzL2hlZS9oZWUtdGFicy90YWJzJztcbi8vaW1wb3J0IFRpbWVsaW5lIGZyb20gJy4uL2NvbXBvbmVudHMvaGVlL2hlZS10aW1lbGluZS90aW1lbGluZSc7XG5cbi8vIFVuc29ydGVkIGNvbXBvbmVudHNcbmltcG9ydCBGaWx0ZXIgZnJvbSAnLi4vY29tcG9uZW50cy9oZWUvaGVlLWZpbHRlci9maWx0ZXInO1xuaW1wb3J0IEZpbHRlclRhZyBmcm9tICcuLi9jb21wb25lbnRzL2hlZS9oZWUtZmlsdGVydGFnL2ZpbHRlcnRhZyc7XG5cbi8vaW1wb3J0ICcuL3BvbHlmaWxscyc7XG5cbi8vIEluaXRpYWxpemUgY29tcG9uZW50c1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgVGFicygpO1xuICBBbmNob3JMaW5rcygpO1xuICBDb29raWVzKCk7XG4gIEZpbHRlcigpO1xuICBGaWx0ZXJUYWcoKTtcbiAgTGlzdGluZygpO1xuICBNZWRpYSgpO1xuICBOYXZNYXAoKTtcbiAgU3ViTWVudSgpO1xuICBOZXdzbGV0dGVyKCk7XG59KTtcbiIsImV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgLyoqXG4gICogTWFwXG4gICogRWxlbWVudHMgd2l0aCB0aGUgc2VsZWN0b3IgJy5uaHN1ay1yZWdpb24nIGFyZSBwYXNzZWQgaW50byB0aGlzIGNsYXNzXG4gICovXG4gIGNsYXNzIE5hdk1hcCB7XG4gICAgY29uc3RydWN0b3IobWFwLCBzdmcpIHtcbiAgICAgIHRoaXMubWFwID0gbWFwO1xuICAgICAgdGhpcy5zdmcgPSBzdmc7XG4gICAgICB0aGlzLnJlZ2lvbnMgPSBbLi4uc3ZnLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25oc3VrLXJlZ2lvbicpXTtcbiAgICAgIHRoaXMubGlzdCA9IFsuLi5tYXAucXVlcnlTZWxlY3RvckFsbCgnI3JlZ2lvbkxpc3QgbGkgYScpXTtcblxuICAgICAgdGhpcy5hZGRMaW5rc1RvTWFwKCk7XG4gICAgICB0aGlzLmNsZWFuU3R5bGUoKTtcbiAgICAgIHRoaXMubWFwRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgIHRoaXMubGlua0V2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgY2xlYW5TdHlsZSgpe1xuICAgICAgdGhpcy5zdmcucXVlcnlTZWxlY3Rvcignc3R5bGUnKS5pbm5lckhUTUwgPSBcIlwiXG4gICAgICB0aGlzLnN2Zy5xdWVyeVNlbGVjdG9yKCdzdHlsZScpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGBcbiAgICAgICAgLnN0MHtmaWxsOiMwMDVFQjg7c3Ryb2tlOiNGRkZGRkY7c3Ryb2tlLXdpZHRoOjAuNTtzdHJva2UtbWl0ZXJsaW1pdDoxMDt9XG4gICAgICAgIC5zdDF7ZmlsbDojQUVCN0JEO3N0cm9rZTojRkZGRkZGO3N0cm9rZS13aWR0aDowLjU7c3Ryb2tlLW1pdGVybGltaXQ6MTA7fVxuICAgICAgICAuaG92ZXIgKiB7c3Ryb2tlOiNmZmViM2I7c3Ryb2tlLXdpZHRoOiA2O3N0cm9rZS1taXRlcmxpbWl0OiAxO31cbiAgICAgICAgLmZvY3VzIC5zdDAge2ZpbGw6I2ZmZWIzYjtzdHJva2U6IzIxMmIzMjt9XG4gICAgICAgIC5mb2N1cyAqIHtzdHJva2Utd2lkdGg6IDY7c3Ryb2tlLW1pdGVybGltaXQ6IDE7fVxuICAgICAgYCkpXG4gICAgfVxuXG4gICAgYWRkTGlua3NUb01hcCgpe1xuICAgICAgdGhpcy5yZWdpb25zLmZvckVhY2gocmVnaW9uID0+IHtcbiAgICAgICAgY29uc3QgdGhpc0NvdW50ZXJwYXJ0ID0gdGhpcy5tYXBDb3VudGVycGFydChyZWdpb24uaWQpXG4gICAgICAgIGNvbnN0IHRoaXNIcmVmID0gKHRoaXNDb3VudGVycGFydC5ocmVmKT8gdGhpc0NvdW50ZXJwYXJ0LmhyZWYgOiBcIi9cIlxuICAgICAgICBjb25zdCB0aGlzVGl0bGUgPSAodGhpc0NvdW50ZXJwYXJ0LmlubmVySFRNTCk/IHRoaXNDb3VudGVycGFydC5pbm5lckhUTUwgOiBcIlwiXG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gcmVnaW9uLmlubmVySFRNTDtcbiAgICAgICAgY29uc3Qgd3JhcExpbmsgPSBgPGEgeGxpbms6aHJlZj1cIiR7dGhpc0hyZWZ9XCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCI+XG4gICAgICAgICAgPHRpdGxlPiR7dGhpc1RpdGxlfTwvdGl0bGU+XG4gICAgICAgICAgJHtjaGlsZHJlbn1cbiAgICAgICAgPC9hPmBcbiAgICAgICAgcmVnaW9uLmlubmVySFRNTCA9IHdyYXBMaW5rXG4gICAgICB9KVxuICAgIH1cblxuICAgIG1hcEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgdGhpcy5yZWdpb25zLmZvckVhY2goZWxlbWVudCA9PiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsICgpID0+IHRoaXMubWFwSW4oZWxlbWVudCwgXCJob3ZlclwiLCB0cnVlKSkpXG4gICAgICB0aGlzLnJlZ2lvbnMuZm9yRWFjaChlbGVtZW50ID0+IGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsICgpID0+IHRoaXMubWFwT3V0KGVsZW1lbnQsIFwiaG92ZXJcIiwgdHJ1ZSkpKVxuICAgICAgdGhpcy5yZWdpb25zLmZvckVhY2goZWxlbWVudCA9PiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldmVudCA9PiB0aGlzLm1hcENsaWNrKGV2ZW50KSkpXG4gICAgfVxuXG4gICAgbGlua0V2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgdGhpcy5saXN0LmZvckVhY2goaXRlbSA9PiBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsIGV2ZW50ID0+IHRoaXMubGlua0V2ZW50KGV2ZW50LnRhcmdldCwgXCJpblwiLCBcImhvdmVyXCIpKSlcbiAgICAgIHRoaXMubGlzdC5mb3JFYWNoKGVsZW1lbnQgPT4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdXRcIiwgZXZlbnQgPT4gdGhpcy5saW5rRXZlbnQoZXZlbnQudGFyZ2V0LCBcIm91dFwiLCBcImhvdmVyXCIpKSlcbiAgICAgIHRoaXMubGlzdC5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLCBldmVudCA9PiB0aGlzLmxpbmtFdmVudChldmVudC50YXJnZXQsIFwiaW5cIiwgXCJmb2N1c1wiKSkpXG4gICAgICB0aGlzLmxpc3QuZm9yRWFjaChpdGVtID0+IGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcihcImZvY3Vzb3V0XCIsIGV2ZW50ID0+IHRoaXMubGlua0V2ZW50KGV2ZW50LnRhcmdldCwgXCJvdXRcIiwgXCJmb2N1c1wiKSkpXG4gICAgfVxuXG4gICAgbW92ZVRvVG9wKG9iaikge1xuICAgICAgb2JqLnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQob2JqKTtcbiAgICB9XG5cbiAgICBtYXBJbih0YXJnZXQsIHN0eWxlLCBtYXApIHtcbiAgICAgIHRoaXMubW92ZVRvVG9wKHRhcmdldClcbiAgICAgIHRhcmdldC5jbGFzc0xpc3QuYWRkKHN0eWxlKVxuICAgICAgaWYobWFwKSB7XG4gICAgICAgIGNvbnN0IHRoaXNMaW5rID0gdGhpcy5tYXBDb3VudGVycGFydCh0YXJnZXQuaWQpXG4gICAgICAgIGlmKHRoaXNMaW5rKSB0aGlzTGluay5jbGFzc0xpc3QuYWRkKFwiaG92ZXJcIilcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtYXBPdXQodGFyZ2V0LCBzdHlsZSwgbWFwKSB7XG4gICAgICB0YXJnZXQuY2xhc3NMaXN0LnJlbW92ZShzdHlsZSlcbiAgICAgIGlmKG1hcCkge1xuICAgICAgICBjb25zdCB0aGlzTGluayA9IHRoaXMubWFwQ291bnRlcnBhcnQodGFyZ2V0LmlkKVxuICAgICAgICBpZih0aGlzTGluaykgdGhpc0xpbmsuY2xhc3NMaXN0LnJlbW92ZShcImhvdmVyXCIpXG4gICAgICB9XG4gICAgfVxuXG4gICAgbWFwQ2xpY2soZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIGNvbnN0IHRoaXNNYXBDb3VudGVycGFydCA9IHRoaXMubWFwQ291bnRlcnBhcnQoZXZlbnQudGFyZ2V0LmNsb3Nlc3QoXCJnXCIpLmlkKVxuICAgICAgaWYodGhpc01hcENvdW50ZXJwYXJ0KSB0aGlzTWFwQ291bnRlcnBhcnQuY2xpY2soKVxuICAgIH1cblxuICAgIG1hcENvdW50ZXJwYXJ0KHRoaXNJZCkge1xuICAgICAgY29uc3QgdGhpc0NvdW50ZXJwYXJ0ID0gdGhpcy5saXN0LmZpbmQoaXRlbSA9PiBpdGVtLmlkID09PSB0aGlzSWQpXG4gICAgICByZXR1cm4gKHRoaXNDb3VudGVycGFydClcbiAgICB9XG5cbiAgICBsaW5rRXZlbnQodGFyZ2V0LCBkaXJlY3Rpb24sIHR5cGUpIHtcbiAgICAgIGNvbnN0IHRoaXNJZCA9IHRhcmdldC5pZFxuICAgICAgY29uc3QgdGhpc0NvdW50ZXJwYXJ0ID0gdGhpcy5saW5rQ291bnRlcnBhcnQodGhpc0lkKVxuICAgICAgaWYoZGlyZWN0aW9uID09PSBcImluXCIpIHtcbiAgICAgICAgdGhpcy5tYXBJbih0aGlzQ291bnRlcnBhcnQsIHR5cGUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm1hcE91dCh0aGlzQ291bnRlcnBhcnQsIHR5cGUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgbGlua0NvdW50ZXJwYXJ0KHRoaXNJZCkge1xuICAgICAgY29uc3QgdGhpc0NvdW50ZXJwYXJ0ID0gdGhpcy5yZWdpb25zLmZpbmQoaXRlbSA9PiBpdGVtLmlkID09PSB0aGlzSWQpXG4gICAgICByZXR1cm4gKHRoaXNDb3VudGVycGFydClcbiAgICB9XG4gIH1cblxuICBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm5oc3VrLW1hcCcpXS5mb3JFYWNoKG1hcCA9PiB7XG4gICAgLy8gbmVlZCB0byB3YWl0IGZvciBTVkcgdG8gbG9hZFxuICAgIGNvbnN0IG9iaiA9IG1hcC5xdWVyeVNlbGVjdG9yKCdvYmplY3QnKVxuICAgIG9iai5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24oKXtcbiAgICAgIGNvbnN0IHN2ZyA9IG9iai5nZXRTVkdEb2N1bWVudCgpLnF1ZXJ5U2VsZWN0b3IoJ3N2ZycpXG4gICAgICBpZihzdmcpe1xuICAgICAgICBuZXcgTmF2TWFwKG1hcCwgc3ZnKVxuICAgICAgfVxuICAgIH0pXG4gIH0pXG59IiwiZXhwb3J0IGRlZmF1bHQgKCkgPT4ge1xuICAvKipcbiAgKiBMaXN0aW5nXG4gICogRWxlbWVudHMgd2l0aCB0aGUgc2VsZWN0b3IgJy5uaHN1ay1saXN0aW5nJyBhcmUgcGFzc2VkIGludG8gdGhpcyBjbGFzc1xuICAqL1xuICBjbGFzcyBMaXN0aW5nIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgdGhpcy5zb3J0ID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLm5oc3VrLWxpc3RpbmdfX3NvcnQnKTtcblxuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICAgICAgdGhpcy50b2dnbGVKYXZhc2NyaXB0RWxlbWVudHMoKTtcbiAgICB9XG5cbiAgICBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICAgIGlmICh0aGlzLnNvcnQpIHtcbiAgICAgICAgWy4uLnRoaXMuc29ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2VsZWN0JyldLmZvckVhY2goc2VsZWN0ID0+IHNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBldnQgPT4gdGhpcy51cGRhdGVSZXN1bHRzKGV2dCkpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0b2dnbGVKYXZhc2NyaXB0RWxlbWVudHMoKSB7XG4gICAgICBpZiAodGhpcy5zb3J0KSB7XG4gICAgICAgIGNvbnN0IHN1Ym1pdCA9IHRoaXMuc29ydC5xdWVyeVNlbGVjdG9yKCcubmhzdWstbGlzdGluZ19fc29ydF9fc3VibWl0Jyk7XG4gICAgICAgIGlmIChzdWJtaXQpIHtcbiAgICAgICAgICBzdWJtaXQuaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZVJlc3VsdHMoKSB7XG4gICAgICB0aGlzLnNvcnQuc3VibWl0KCk7XG4gICAgfVxuICB9XG5cbiAgWy4uLmRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25oc3VrLWxpc3RpbmcnKV0uZm9yRWFjaChsaXN0aW5nID0+IG5ldyBMaXN0aW5nKGxpc3RpbmcpKTtcbn0iLCJleHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIC8qKlxuICAqIEZpbHRlclxuICAqIEVsZW1lbnRzIHdpdGggdGhlIHNlbGVjdG9yICcubmhzdWstZmlsdGVyJyBhcmUgcGFzc2VkIGludG8gdGhpcyBjbGFzc1xuICAqL1xuICBjbGFzcyBGaWx0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lcikge1xuICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG5cbiAgICAgIHRoaXMuY2hlY2tib3hlcyA9IFsuLi50aGlzLmNvbnRhaW5lci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCduaHN1ay1jaGVja2JveGVzX19pbnB1dCcpXTtcbiAgICAgIHRoaXMuZ3JvdXBzID0gWy4uLnRoaXMuY29udGFpbmVyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25oc3VrLWZpbHRlcl9fZ3JvdXAnKV07XG4gICAgICB0aGlzLnN1Ym1pdCA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5uaHN1ay1maWx0ZXJfX3N1Ym1pdCcpO1xuXG4gICAgICB0aGlzLnNldFVwKCk7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICB0aGlzLmNoZWNrYm94ZXMuZm9yRWFjaChjaGVja2JveCA9PiB7XG4gICAgICAgIGNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGV2dCA9PiB0aGlzLnVwZGF0ZVJlc3VsdHMoZXZ0KSk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5ncm91cHMuZm9yRWFjaChncm91cCA9PiB7XG4gICAgICAgIGNvbnN0IGxlZ2VuZCA9IGdyb3VwLnF1ZXJ5U2VsZWN0b3IoJy5uaHN1ay1maWVsZHNldF9fbGVnZW5kJyk7XG4gICAgICAgIGlmIChsZWdlbmQpIHtcbiAgICAgICAgICBsZWdlbmQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldnQgPT4gdGhpcy50b2dnbGVHcm91cChldnQpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2V0VXAoKSB7XG4gICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCduaHN1ay1maWx0ZXItLWpzJyk7XG5cbiAgICAgIC8vIENsb3NlIGdyb3Vwc1xuICAgICAgLy8gdGhpcy5ncm91cHMuZm9yRWFjaChncm91cCA9PiBncm91cC5jbGFzc0xpc3QuYWRkKCduaHN1ay1maWx0ZXJfX2dyb3VwLS1jbG9zZWQnKSk7XG5cbiAgICAgIC8vIEhpZGUgc3VibWl0IGJ1dHRvblxuICAgICAgaWYgKHRoaXMuc3VibWl0KSB7XG4gICAgICAgIHRoaXMuc3VibWl0LmhpZGRlbiA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdG9nZ2xlR3JvdXAoZXZ0KSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2dC50YXJnZXQuY2xvc2VzdCgnLm5oc3VrLWZpbHRlcl9fZ3JvdXAnKS5jbGFzc0xpc3QudG9nZ2xlKCduaHN1ay1maWx0ZXJfX2dyb3VwLS1jbG9zZWQnKTtcbiAgICB9XG5cbiAgICB1cGRhdGVSZXN1bHRzKGV2dCkge1xuICAgICAgdGhpcy5jb250YWluZXIuc3VibWl0KCk7XG4gICAgfVxuICB9XG5cbiAgWy4uLmRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25oc3VrLWZpbHRlcicpXS5mb3JFYWNoKGZpbHRlciA9PiBuZXcgRmlsdGVyKGZpbHRlcikpO1xufSIsImV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgLyoqXG4gICogQW5jaG9yTGlua3NcbiAgKiBFbGVtZW50cyB3aXRoIHRoZSBzZWxlY3RvciAnLm5oc3VrLWFuY2hvci1saW5rcycgYXJlIHBhc3NlZCBpbnRvIHRoaXMgY2xhc3NcbiAgKi9cbiAgY2xhc3MgQW5jaG9yTGlua3Mge1xuICAgIGNvbnN0cnVjdG9yKGFuY2hvckxpbmtzKSB7XG4gICAgICB0aGlzLmFuY2hvckxpbmtzID0gYW5jaG9yTGlua3M7XG4gICAgICB0aGlzLmFuY2hvckxpbmtzLmhpZGRlbiA9IHRydWU7XG4gICAgICB0aGlzLmZvdW5kSGVhZGluZ3MgPSB0aGlzLmZpbmRIZWFkaW5ncyhhbmNob3JMaW5rcy5kYXRhc2V0LmhlYWRpbmdzKTtcbiAgICAgIGlmICh0aGlzLmZvdW5kSGVhZGluZ3M/Lmxlbmd0aCkge1xuICAgICAgICB0aGlzLmFkZEFuY2hvcnNUb1BhZ2UoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmaW5kSGVhZGluZ3MoaGVhZGluZ3MpIHtcbiAgICAgIGxldCBmb3VuZEhlYWRpbmdzID0gW11cbiAgICAgIGlmIChoZWFkaW5ncykge1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGhlYWRpbmdzKS5mb3JFYWNoKChoZWFkaW5nLCBpKSA9PiB7XG4gICAgICAgICAgaWYgKCFoZWFkaW5nLmlkKSB7XG4gICAgICAgICAgICBoZWFkaW5nLmlkID0gaGVhZGluZy5pbm5lclRleHQucmVwbGFjZSgvIC4qLywnJykucmVwbGFjZSgvW1xcblxccl0vZywnJykucmVwbGFjZSgvXFxzL2csJycpLnRvTG93ZXJDYXNlKCkraTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm91bmRIZWFkaW5ncy5wdXNoKGhlYWRpbmcpO1xuICAgICAgICB9KVxuICAgICAgfSAgICAgIFxuICAgICAgcmV0dXJuIGZvdW5kSGVhZGluZ3M7XG4gICAgfVxuXG4gICAgYXBwZWFyc09uUmlnaHRQYWdlQ29sdW1uKGhlYWRpbmcsIHNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpXS5zb21lKGVsID0+XG4gICAgICAgIGVsICE9PSBoZWFkaW5nICYmIGVsLmNvbnRhaW5zKGhlYWRpbmcpXG4gICAgICApXG4gICAgfVxuXG4gICAgYWRkQW5jaG9yc1RvUGFnZSgpIHtcbiAgICAgIGxldCB1bCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG4gICAgICB0aGlzLmZvdW5kSGVhZGluZ3MuZm9yRWFjaChmb3VuZEhlYWRpbmcgPT4ge1xuICAgICAgICBpZiAoIWZvdW5kSGVhZGluZy5kYXRhc2V0LmFuY2hvcmxpbmtzaWdub3JlXG4gICAgICAgICAgJiYgIWZvdW5kSGVhZGluZy5jbGFzc0xpc3QuY29udGFpbnMoJ25oc3VrLXUtdmlzdWFsbHktaGlkZGVuJylcbiAgICAgICAgICAmJiAhZm91bmRIZWFkaW5nLmNsYXNzTGlzdC5jb250YWlucygnbmhzdWstY2FyZF9faGVhZGluZycpXG4gICAgICAgICAgJiYgIXRoaXMuYXBwZWFyc09uUmlnaHRQYWdlQ29sdW1uKGZvdW5kSGVhZGluZywgJy5uaHN1ay1ncmlkLWNvbHVtbi1vbmUtdGhpcmQnKSlcbiAgICAgICAge1xuICAgICAgICAgIGxldCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgICAgbGV0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgYS5ocmVmID0gJyMnK2ZvdW5kSGVhZGluZy5pZDtcbiAgICAgICAgICBjb25zdCBoaWRkZW5FbGVtZW50cyA9IGZvdW5kSGVhZGluZy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwibmhzdWstdS12aXN1YWxseS1oaWRkZW5cIik7XG4gICAgICAgICAgd2hpbGUgKGhpZGRlbkVsZW1lbnRzLmxlbmd0aCA+IDApIGhpZGRlbkVsZW1lbnRzWzBdLnJlbW92ZSgpO1xuICAgICAgICAgIGEuaW5uZXJUZXh0ID0gZm91bmRIZWFkaW5nLmlubmVyVGV4dDsgLy8gc3RyaXAgdGFnc1xuICAgICAgICAgIGEuaW5uZXJIVE1MID0gYS5pbm5lckhUTUwucmVwbGFjZSgvPGJyXFxzKltcXC9dPz4vZ2ksIFwiIFwiKTsgLy8gc3RyaXAgPGJyPlxuICAgICAgICAgIGxpLmFwcGVuZENoaWxkKGEpO1xuICAgICAgICAgIHVsLmFwcGVuZENoaWxkKGxpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLmFuY2hvckxpbmtzLmFwcGVuZENoaWxkKHVsKTtcbiAgICAgIHRoaXMuYW5jaG9yTGlua3MuaGlkZGVuID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgWy4uLmRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25oc3VrLWFuY2hvci1saW5rcycpXS5mb3JFYWNoKGFuY2hvckxpbmtzID0+IG5ldyBBbmNob3JMaW5rcyhhbmNob3JMaW5rcykpO1xufSIsImV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgY2xhc3MgQ29va2llcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAvLyBiYW5uZXJcbiAgICAgIHRoaXMudXNlQ29va2llcyA9ICcnXG4gICAgICB0aGlzLmJhbm5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uaHN1ay1jb29raWUtYmFubmVyJylcbiAgICAgIHRoaXMuc2hvd0Nvb2tpZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2hvd0Nvb2tpZXMnKVxuICAgICAgdGhpcy5yZW1vdmVDb29raWVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlbW92ZUNvb2tpZXMnKVxuICAgICAgdGhpcy5ob3N0ID0gdGhpcy5nZXRIb3N0KClcblxuICAgICAgdGhpcy5jb29raWVTdGF0dXMoKVxuICAgICAgdGhpcy5zZXRDb29raWVzKClcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKVxuXG4gICAgICAvLyBwb2xpY3kgcGFnZVxuICAgICAgdGhpcy5TdGF0dXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmhzdWtfX2Nvb2tpZVN0YXR1cycpXG4gICAgICB0aGlzLkluID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm5oc3VrX19jb29raWVzSW4nKVxuICAgICAgdGhpcy5PdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubmhzdWtfX2Nvb2tpZXNPdXQnKVxuXG4gICAgICB0aGlzLnRvZ2dsZVN0YXR1cygpXG4gICAgfVxuXG4gICAgY29va2llU3RhdHVzKCl7XG4gICAgICBjb25zdCBjb29raWVzID0gZG9jdW1lbnQuY29va2llLnNwbGl0KFwiO1wiKVxuICAgICAgY29va2llcy5mb3JFYWNoKGMgPT4ge1xuICAgICAgICBjb25zdCBtYXRjaCA9IGMubWF0Y2gobmV3IFJlZ0V4cCgnKF58IClhbmFseXRpY3NDb29raWUoW147XSspJykpXG4gICAgICAgIGlmKG1hdGNoKSB7XG4gICAgICAgICAgY29uc3Qgc3RhdHVzID0gYy5zcGxpdChcIj1cIilbMV1cbiAgICAgICAgICB0aGlzLnVzZUNvb2tpZXMgPSBzdGF0dXNcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBnZXRIb3N0KCl7XG4gICAgICBjb25zdCBob3N0ID0gd2luZG93LmxvY2F0aW9uLmhvc3QudG9TdHJpbmcoKS5zcGxpdChcIjpcIilbMF1cbiAgICAgIHJldHVybiBob3N0XG4gICAgfVxuXG4gICAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICBpZih0aGlzLnNob3dDb29raWVzKSB7XG4gICAgICAgIHRoaXMuc2hvd0Nvb2tpZXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5zaG93Q29va2llKVxuICAgICAgfVxuICAgICAgaWYodGhpcy5yZW1vdmVDb29raWVzKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlQ29va2llcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLnJlbW92ZUNvb2tpZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBiYW5uZXJTaG93KCkge1xuICAgICAgaWYodGhpcy5iYW5uZXIpIHtcbiAgICAgICAgdGhpcy5iYW5uZXIuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIlxuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBiYW5uZXJIaWRlKCkge1xuICAgICAgaWYodGhpcy5iYW5uZXIpIHtcbiAgICAgICAgdGhpcy5iYW5uZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXG4gICAgICB9XG4gICAgfVxuXG4gICAgc2V0Q29va2llcygpIHtcbiAgICAgICAgaWYgKHRoaXMudXNlQ29va2llcyA9PT0gJycpIHtcbiAgICAgICAgICB0aGlzLmJhbm5lclNob3coKVxuICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNuaHN1ay1jb29raWUtYmFubmVyX19saW5rX2FjY2VwdF9hbmFseXRpY3MnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2dCA9PiB7XG4gICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgdGhpcy5iYW5uZXJIaWRlKClcbiAgICAgICAgICAgIHRoaXMudXNlQ29va2llKClcbiAgICAgICAgICB9KVxuICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNuaHN1ay1jb29raWUtYmFubmVyX19saW5rX2RlY2xpbmVfYW5hbHl0aWNzJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldnQgPT4ge1xuICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgIHRoaXMuYmFubmVySGlkZSgpXG4gICAgICAgICAgICB0aGlzLm5vQ29va2llKClcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXNlQ29va2llKCkge1xuICAgICAgZG9jdW1lbnQuY29va2llID0gYGFuYWx5dGljc0Nvb2tpZT10cnVlOyBkb21haW49JHt0aGlzLmhvc3R9OyBtYXgtYWdlPTc3NzYwMDBgXG4gICAgICBsb2NhdGlvbi5yZWxvYWQoKVxuICAgIH1cblxuICAgIG5vQ29va2llKCkge1xuICAgICAgZG9jdW1lbnQuY29va2llID0gYGFuYWx5dGljc0Nvb2tpZT1mYWxzZTsgZG9tYWluPSR7dGhpcy5ob3N0fTsgbWF4LWFnZT03Nzc2MDAwYFxuICAgICAgbG9jYXRpb24ucmVsb2FkKClcbiAgICB9XG5cbiAgICB0b2dnbGVTdGF0dXMoKSB7XG4gICAgICBpZih0aGlzLlN0YXR1cyl7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbi5uaHN1a19fY29va2llc091dCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZ0ID0+IHtcbiAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgIHRoaXMuYmFubmVySGlkZSgpXG4gICAgICAgICAgdGhpcy51c2VDb29raWUoKVxuICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICAgIH0pXG5cbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYnV0dG9uLm5oc3VrX19jb29raWVzSW4nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2dCA9PiB7XG4gICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICB0aGlzLmJhbm5lckhpZGUoKVxuICAgICAgICAgIHRoaXMubm9Db29raWUoKVxuICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYgKHRoaXMudXNlQ29va2llcyA9PT0gXCJmYWxzZVwiIHx8IHRoaXMudXNlQ29va2llcyA9PT0gJycgKSB7XG4gICAgICAgICAgdGhpcy5kaXNwbGF5QmxvY2sodGhpcy5PdXQpXG4gICAgICAgICAgdGhpcy5kaXNwbGF5Tm9uZSh0aGlzLkluKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZGlzcGxheU5vbmUodGhpcy5PdXQpXG4gICAgICAgICAgdGhpcy5kaXNwbGF5QmxvY2sodGhpcy5JbilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGRpc3BsYXlCbG9jayhpdGVtKSB7XG4gICAgICBpdGVtLmZvckVhY2goZSA9PiBlLnN0eWxlLmRpc3BsYXk9XCJpbmxpbmUtYmxvY2tcIilcbiAgICB9XG5cbiAgICBkaXNwbGF5Tm9uZShpdGVtKSB7XG4gICAgICBpdGVtLmZvckVhY2goZSA9PiBlLnN0eWxlLmRpc3BsYXk9XCJub25lXCIpXG4gICAgfVxuXG4gICAgLy8gcmVkdW5kYW50IGJ1dCB1c2VmdWxcbiAgICBzaG93Q29va2llKCkge1xuICAgICAgY29uc3Qgb3V0cHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Nvb2tpZXMnKVxuICAgICAgb3V0cHV0LnRleHRDb250ZW50ID0gJz4gJyArIGRvY3VtZW50LmNvb2tpZVxuICAgIH1cbiAgICBcbiAgICByZW1vdmVDb29raWUoKSB7XG4gICAgICBkb2N1bWVudC5jb29raWUgPSBcImFuYWx5dGljc0Nvb2tpZT1mYWxzZTsgbWF4LWFnZT0wXCJcbiAgICAgIGxvY2F0aW9uLnJlbG9hZCgpXG4gICAgfVxuXG4gIH1cblxuICBuZXcgQ29va2llcyhkb2N1bWVudClcbn0iXSwibmFtZXMiOlsiU3VibWVudSIsImNvbnRhaW5lciIsInRoaXMiLCJ0b2dnbGVMaW5rIiwicXVlcnlTZWxlY3RvciIsInBhcmVudExpc3QiLCJwYXJlbnROb2RlIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJ0b2dnbGVNZW51Iiwia2V5Q29kZSIsImFjdGl2ZUVsZW1zIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImVsZW0iLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJ0b2dnbGVBdHRyaWJ1dGUiLCJ0b2dnbGVDbGFzcyIsImxlbmd0aCIsInByZXZlbnREZWZhdWx0IiwiaGFuZGxlU3RhdGUiLCJlbGVtZW50IiwiY2xhc3NOYW1lIiwiY29udGFpbnMiLCJhZGQiLCJhdHRyIiwidmFsdWUiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwic3VibWVudSIsImNsb3NlTWVudSIsInVzZXJJbnB1dCIsIm9wZW5NZW51IiwiaXNOb3RNZW51IiwidGFyZ2V0IiwiaXNOb3RNZW51QnV0dG9uIiwiaXNNZW51Q2hpbGQiLCJjbG9zZXN0Iiwib3BlblN1YiIsImlzTm90U3ViIiwiaXNTdWJDaGlsZCIsImZvY3VzIiwiVHJhbnNjcmlwdCIsInRvZ2dsZXMiLCJjb25zb2xlIiwibG9nIiwidG9nZ2xlIiwiZXZ0IiwidG9nZ2xldHJhbnNjcmlwdCIsImlzQ29sbGFwc2VkIiwidHJhbnNjcmlwdCIsIk5ld3NsZXR0ZXIiLCJuZXdzbGV0dGVyIiwicmVxdWlyZWRJbnB1dHMiLCJlcnJvcnMiLCJpbml0IiwicmVzZXRGb3JtIiwiYWRkRXZlbnRzIiwiaW5wdXQiLCJjIiwidmFsaWRhdGUiLCJ0YXJnZXRFcnJvciIsImdldEVsZW1lbnRCeUlkIiwibmFtZSIsInRhcmdldFN1bW1hcnlFcnJvciIsImVycm9yRW1wdHkiLCJlcnJvckVtYWlsIiwiZXJyb3JDb25zZW50IiwidXBkYXRlU3VtbWFyeSIsImVycm9yU3VtbWFyeSIsInN0eWxlIiwiZGlzcGxheSIsImlzRW1wdHkiLCJzaG93RXJyb3IiLCJoaWRlRXJyb3IiLCJ0ZXN0IiwiY2hlY2tlZCIsInBhcmVudEVsZW1lbnQiLCJmaWx0ZXIiLCJpdGVtIiwicHVzaCIsInN0ciIsInRyaW0iLCJlcnJvciIsImVycm9yY2xhc3MiLCJlcnJvcnN1bW1hcnkiLCJzdW1tYXJ5aXRlbSIsIlRhYnMiLCJ0YWJjb21wb25lbnQiLCJpIiwidGFicyIsInRhYkxpc3QiLCJ0YWIiLCJjaGFuZ2VUYWJzIiwidGFiRm9jdXMiLCJlIiwicGFyZW50IiwiZ3JhbmRwYXJlbnQiLCJzZWxlY3RlZCIsImlzX21vYmlsZSIsInJlbW92ZVNlbGVjdGVkIiwiaGlkZVRhYnMiLCJzZXRTZWxlY3RlZCIsInNob3dTZWxlY3RlZCIsImVsZSIsInQiLCJwIiwicmVtb3ZlQXR0cmlidXRlIiwiRmlsdGVyVGFnIiwidGFnIiwiaWNvbiIsInNldFVwIiwicmVtb3ZlRmlsdGVyIiwiZGF0YXNldCIsImNoZWNrYm94IiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50IiwiaGlkZGVuIiwiTmF2TWFwIiwiTGlzdGluZyIsIkZpbHRlciIsIkFuY2hvckxpbmtzIiwiYW5jaG9yTGlua3MiLCJmb3VuZEhlYWRpbmdzIiwiZmluZEhlYWRpbmdzIiwiaGVhZGluZ3MiLCJhZGRBbmNob3JzVG9QYWdlIiwiaGVhZGluZyIsImlkIiwiaW5uZXJUZXh0IiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwic2VsZWN0b3IiLCJzb21lIiwiZWwiLCJ1bCIsImNyZWF0ZUVsZW1lbnQiLCJmb3VuZEhlYWRpbmciLCJhbmNob3JsaW5rc2lnbm9yZSIsImFwcGVhcnNPblJpZ2h0UGFnZUNvbHVtbiIsImxpIiwiYSIsImhyZWYiLCJoaWRkZW5FbGVtZW50cyIsImlubmVySFRNTCIsImFwcGVuZENoaWxkIiwidXNlQ29va2llcyIsImJhbm5lciIsInNob3dDb29raWVzIiwicmVtb3ZlQ29va2llcyIsImhvc3QiLCJnZXRIb3N0IiwiY29va2llU3RhdHVzIiwic2V0Q29va2llcyIsIlN0YXR1cyIsIkluIiwiT3V0IiwidG9nZ2xlU3RhdHVzIiwiY29va2llIiwic3BsaXQiLCJtYXRjaCIsIlJlZ0V4cCIsInN0YXR1cyIsIndpbmRvdyIsImxvY2F0aW9uIiwidG9TdHJpbmciLCJzaG93Q29va2llIiwicmVtb3ZlQ29va2llIiwiYmFubmVyU2hvdyIsImJhbm5lckhpZGUiLCJ1c2VDb29raWUiLCJub0Nvb2tpZSIsInJlbG9hZCIsImRpc3BsYXlCbG9jayIsImRpc3BsYXlOb25lIiwidGV4dENvbnRlbnQiLCJjaGVja2JveGVzIiwiZ3JvdXBzIiwic3VibWl0IiwidXBkYXRlUmVzdWx0cyIsImdyb3VwIiwibGVnZW5kIiwidG9nZ2xlR3JvdXAiLCJzb3J0IiwidG9nZ2xlSmF2YXNjcmlwdEVsZW1lbnRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzZWxlY3QiLCJsaXN0aW5nIiwiTWVkaWEiLCJtYXAiLCJzdmciLCJyZWdpb25zIiwibGlzdCIsImFkZExpbmtzVG9NYXAiLCJjbGVhblN0eWxlIiwibWFwRXZlbnRMaXN0ZW5lcnMiLCJsaW5rRXZlbnRMaXN0ZW5lcnMiLCJjcmVhdGVUZXh0Tm9kZSIsInJlZ2lvbiIsInRoaXNDb3VudGVycGFydCIsIm1hcENvdW50ZXJwYXJ0IiwidGhpc0hyZWYiLCJ0aGlzVGl0bGUiLCJjaGlsZHJlbiIsIndyYXBMaW5rIiwibWFwSW4iLCJtYXBPdXQiLCJtYXBDbGljayIsImxpbmtFdmVudCIsIm9iaiIsIm1vdmVUb1RvcCIsInRoaXNMaW5rIiwidGhpc01hcENvdW50ZXJwYXJ0IiwiY2xpY2siLCJ0aGlzSWQiLCJmaW5kIiwiZGlyZWN0aW9uIiwidHlwZSIsImxpbmtDb3VudGVycGFydCIsImdldFNWR0RvY3VtZW50IiwiU3ViTWVudSJdLCJzb3VyY2VSb290IjoiIn0=